{"ast":null,"code":"import * as THREE from 'three';\nimport { DoubleSide } from 'three';\nimport AudioController from '../../components/utils/AudioController';\nimport Scene from '../Scene';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport fragmentShader from \"!!raw-loader!!glslify-loader!../../shaders/cover/fragment.glsl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertexShader from \"!!raw-loader!!glslify-loader!../../shaders/cover/vertex.glsl\";\nexport default class Cube {\n  constructor() {\n    this.geometry = new THREE.PlaneGeometry(20, 20, 512, 512);\n    this.material = new THREE.ShaderMaterial({\n      // wireframe: false,\n\n      uniforms: {\n        uMap: {\n          value: null\n        },\n        uBassFrequency: {\n          value: 0\n        },\n        uTime: {\n          value: 0\n        }\n      },\n      side: THREE.DoubleSide,\n      fragmentShader: fragmentShader,\n      vertexShader: vertexShader\n    });\n    this.mesh = new THREE.Points(this.geometry, this.material);\n    this.group = new THREE.Group();\n    this.group.add(this.mesh);\n  }\n  updateCover(src) {\n    console.log(src);\n    Scene.textureLoader.load(src, texture => {\n      console.log(texture);\n      // this.material.map = texture;\n\n      this.material.uniforms.uMap.value = texture;\n      this.material.needsUpdate = true;\n    });\n  }\n  tick(deltaTime) {\n    this.material.uniforms.uTime.value += deltaTime * 0.001;\n    this.material.uniforms.uBassFrequency.value = AudioController.fdata[0];\n  }\n}","map":{"version":3,"names":["THREE","DoubleSide","AudioController","Scene","fragmentShader","vertexShader","Cube","constructor","geometry","PlaneGeometry","material","ShaderMaterial","uniforms","uMap","value","uBassFrequency","uTime","side","mesh","Points","group","Group","add","updateCover","src","console","log","textureLoader","load","texture","needsUpdate","tick","deltaTime","fdata"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/Three-Reader/src/webgl/objects/Cover.js"],"sourcesContent":["import * as THREE from 'three'\nimport { DoubleSide } from 'three';\nimport AudioController from '../../components/utils/AudioController';\nimport Scene from '../Scene';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport fragmentShader from \"!!raw-loader!!glslify-loader!../../shaders/cover/fragment.glsl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertexShader from \"!!raw-loader!!glslify-loader!../../shaders/cover/vertex.glsl\";\n\nexport default class Cube {\n    constructor() {\n        this.geometry = new THREE.PlaneGeometry(20, 20, 512, 512);\n        this.material = new THREE.ShaderMaterial({\n            // wireframe: false,\n            \n            uniforms: {\n                uMap: {value:null},\n                uBassFrequency: {value: 0},\n                uTime: {value:0}\n            },\n            side: THREE.DoubleSide,\n            fragmentShader: fragmentShader,\n            vertexShader: vertexShader,\n        });\n        this.mesh = new THREE.Points(this.geometry, this.material);\n\n        this.group = new THREE.Group();\n        this.group.add(this.mesh);\n    }\n    updateCover(src) {\n        console.log((src));\n\n        Scene.textureLoader.load(src, (texture) => {\n            console.log(texture);\n            // this.material.map = texture;\n            \n            this.material.uniforms.uMap.value = texture;\n            this.material.needsUpdate = true;\n        })\n    }\n    tick(deltaTime) {\n        this.material.uniforms.uTime.value += deltaTime * 0.001;\n        this.material.uniforms.uBassFrequency.value = AudioController.fdata[0];\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,eAAe,MAAM,wCAAwC;AACpE,OAAOC,KAAK,MAAM,UAAU;;AAE5B;AACA,OAAOC,cAAc,MAAM,gEAAgE;AAC3F;AACA,OAAOC,YAAY,MAAM,8DAA8D;AAEvF,eAAe,MAAMC,IAAI,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIR,KAAK,CAACS,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACzD,IAAI,CAACC,QAAQ,GAAG,IAAIV,KAAK,CAACW,cAAc,CAAC;MACrC;;MAEAC,QAAQ,EAAE;QACNC,IAAI,EAAE;UAACC,KAAK,EAAC;QAAI,CAAC;QAClBC,cAAc,EAAE;UAACD,KAAK,EAAE;QAAC,CAAC;QAC1BE,KAAK,EAAE;UAACF,KAAK,EAAC;QAAC;MACnB,CAAC;MACDG,IAAI,EAAEjB,KAAK,CAACC,UAAU;MACtBG,cAAc,EAAEA,cAAc;MAC9BC,YAAY,EAAEA;IAClB,CAAC,CAAC;IACF,IAAI,CAACa,IAAI,GAAG,IAAIlB,KAAK,CAACmB,MAAM,CAAC,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACE,QAAQ,CAAC;IAE1D,IAAI,CAACU,KAAK,GAAG,IAAIpB,KAAK,CAACqB,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACD,KAAK,CAACE,GAAG,CAAC,IAAI,CAACJ,IAAI,CAAC;EAC7B;EACAK,WAAWA,CAACC,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAAEF,GAAI,CAAC;IAElBrB,KAAK,CAACwB,aAAa,CAACC,IAAI,CAACJ,GAAG,EAAGK,OAAO,IAAK;MACvCJ,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;MACpB;;MAEA,IAAI,CAACnB,QAAQ,CAACE,QAAQ,CAACC,IAAI,CAACC,KAAK,GAAGe,OAAO;MAC3C,IAAI,CAACnB,QAAQ,CAACoB,WAAW,GAAG,IAAI;IACpC,CAAC,CAAC;EACN;EACAC,IAAIA,CAACC,SAAS,EAAE;IACZ,IAAI,CAACtB,QAAQ,CAACE,QAAQ,CAACI,KAAK,CAACF,KAAK,IAAIkB,SAAS,GAAG,KAAK;IACvD,IAAI,CAACtB,QAAQ,CAACE,QAAQ,CAACG,cAAc,CAACD,KAAK,GAAGZ,eAAe,CAAC+B,KAAK,CAAC,CAAC,CAAC;EAC1E;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}