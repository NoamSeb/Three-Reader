{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor(frequenceMin, frequenceMax, extrusionAmount) {\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n    this.material = new THREE.MeshNormalMaterial({\n      color: 0xffff00\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.frequenceMin = frequenceMin;\n    this.frequenceMax = frequenceMax;\n    this.extrusionAmount = extrusionAmount;\n  }\n  tick() {\n    this.mesh.rotation.x += 0.01;\n    const frequency = AudioController.fdata[0] / 255;\n    const remapped = this.map(frequency, this.frequenceMin, this.frequenceMax, 0, this.extrusionAmount);\n    const vertices = this.geometry.attributes.position;\n    for (let i = 0; i < vertices.count; i++) {\n      const vertex = new THREE.Vector3(vertices.getX(i), vertices.getY(i), vertices.getZ(i));\n      const direction = vertex.clone().normalize().multiplyScalar(remapped);\n      vertex.add(direction);\n      vertices.setXYZ(i, vertex.x, vertex.y, vertex.z);\n    }\n    this.geometry.attributes.position.needsUpdate = true;\n  }\n  map(value, inMin, inMax, outMin, outMax) {\n    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","frequenceMin","frequenceMax","extrusionAmount","geometry","SphereGeometry","material","MeshNormalMaterial","color","mesh","Mesh","tick","rotation","x","frequency","fdata","remapped","map","vertices","attributes","position","i","count","vertex","Vector3","getX","getY","getZ","direction","clone","normalize","multiplyScalar","add","setXYZ","y","z","needsUpdate","value","inMin","inMax","outMin","outMax"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor(frequenceMin, frequenceMax, extrusionAmount) {\n        this.geometry = new THREE.SphereGeometry(15, 32, 16);\n        this.material = new THREE.MeshNormalMaterial({ color: 0xffff00 });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n\n        this.frequenceMin = frequenceMin;\n        this.frequenceMax = frequenceMax;\n        this.extrusionAmount = extrusionAmount;\n    }\n    \n    tick() {\n        this.mesh.rotation.x += 0.01;\n\n        const frequency = AudioController.fdata[0] / 255;\n        const remapped = this.map(frequency, this.frequenceMin, this.frequenceMax, 0, this.extrusionAmount);\n\n        const vertices = this.geometry.attributes.position;\n\n        for (let i = 0; i < vertices.count; i++) {\n            const vertex = new THREE.Vector3(vertices.getX(i), vertices.getY(i), vertices.getZ(i));\n            const direction = vertex.clone().normalize().multiplyScalar(remapped);\n            vertex.add(direction);\n            vertices.setXYZ(i, vertex.x, vertex.y, vertex.z);\n        }\n\n        this.geometry.attributes.position.needsUpdate = true;\n    }\n\n    map(value, inMin, inMax, outMin, outMax) {\n        return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAACC,YAAY,EAAEC,YAAY,EAAEC,eAAe,EAAE;IACrD,IAAI,CAACC,QAAQ,GAAG,IAAIP,KAAK,CAACQ,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpD,IAAI,CAACC,QAAQ,GAAG,IAAIT,KAAK,CAACU,kBAAkB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,IAAI,CAACC,IAAI,GAAG,IAAIZ,KAAK,CAACa,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACE,QAAQ,CAAC;IAExD,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,eAAe,GAAGA,eAAe;EAC1C;EAEAQ,IAAIA,CAAA,EAAG;IACH,IAAI,CAACF,IAAI,CAACG,QAAQ,CAACC,CAAC,IAAI,IAAI;IAE5B,MAAMC,SAAS,GAAGhB,eAAe,CAACiB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;IAChD,MAAMC,QAAQ,GAAG,IAAI,CAACC,GAAG,CAACH,SAAS,EAAE,IAAI,CAACb,YAAY,EAAE,IAAI,CAACC,YAAY,EAAE,CAAC,EAAE,IAAI,CAACC,eAAe,CAAC;IAEnG,MAAMe,QAAQ,GAAG,IAAI,CAACd,QAAQ,CAACe,UAAU,CAACC,QAAQ;IAElD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,KAAK,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,MAAM,GAAG,IAAI1B,KAAK,CAAC2B,OAAO,CAACN,QAAQ,CAACO,IAAI,CAACJ,CAAC,CAAC,EAAEH,QAAQ,CAACQ,IAAI,CAACL,CAAC,CAAC,EAAEH,QAAQ,CAACS,IAAI,CAACN,CAAC,CAAC,CAAC;MACtF,MAAMO,SAAS,GAAGL,MAAM,CAACM,KAAK,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,cAAc,CAACf,QAAQ,CAAC;MACrEO,MAAM,CAACS,GAAG,CAACJ,SAAS,CAAC;MACrBV,QAAQ,CAACe,MAAM,CAACZ,CAAC,EAAEE,MAAM,CAACV,CAAC,EAAEU,MAAM,CAACW,CAAC,EAAEX,MAAM,CAACY,CAAC,CAAC;IACpD;IAEA,IAAI,CAAC/B,QAAQ,CAACe,UAAU,CAACC,QAAQ,CAACgB,WAAW,GAAG,IAAI;EACxD;EAEAnB,GAAGA,CAACoB,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACrC,OAAO,CAACJ,KAAK,GAAGC,KAAK,KAAKG,MAAM,GAAGD,MAAM,CAAC,IAAID,KAAK,GAAGD,KAAK,CAAC,GAAGE,MAAM;EACzE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}