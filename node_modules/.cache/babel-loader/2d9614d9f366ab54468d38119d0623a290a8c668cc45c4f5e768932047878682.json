{"ast":null,"code":"class AUDIO_CONTROLLER {\n  setup() {\n    this.ctx = new (window.AudioContext || window.webkitAudioContext)();\n    this.audio = new Audio();\n    this.audio.volume = 0.1;\n    this.audio.crossOrigin = \"anonymous\";\n    this.audioSource = this.ctx.createMediaElementSource(this.audio);\n    this.analyser = new AnalyserNode(this.ctx, {\n      fftSize: 1024,\n      smoothingTimeConstant: 0.8\n    });\n    this.fdata = new Uint8Array(this.analyser.frequencyBinCount);\n    console.log(this.fdata);\n    this.audioSource.connect(this.analyser);\n    this.audioSource.connect(this.ctx.destination);\n    this.analyser.getByteFrequencyData(this.fdata);\n  }\n  updateSong(preview) {\n    console.log(preview);\n    this.audio.src = preview;\n    this.audio.currentTime = 0;\n    this.audio.play();\n  }\n}\nconst AudioController = new AUDIO_CONTROLLER();\nexport default AudioController;","map":{"version":3,"names":["AUDIO_CONTROLLER","setup","ctx","window","AudioContext","webkitAudioContext","audio","Audio","volume","crossOrigin","audioSource","createMediaElementSource","analyser","AnalyserNode","fftSize","smoothingTimeConstant","fdata","Uint8Array","frequencyBinCount","console","log","connect","destination","getByteFrequencyData","updateSong","preview","src","currentTime","play","AudioController"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/components/utils/AudioController.js"],"sourcesContent":["class AUDIO_CONTROLLER{\n    setup(){\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.audio = new Audio()\n        this.audio.volume = 0.1\n        this.audio.crossOrigin = \"anonymous\"\n\n        this.audioSource = this.ctx.createMediaElementSource(this.audio);\n        this.analyser = new AnalyserNode(this.ctx,{\n            fftSize:1024,\n            smoothingTimeConstant : 0.8\n        })\n        this.fdata = new Uint8Array(this.analyser.frequencyBinCount)\n        console.log(this.fdata)\n\n        this.audioSource.connect(this.analyser)\n        this.audioSource.connect(this.ctx.destination)\n\n        this.analyser.getByteFrequencyData(this.fdata)\n    }\n    updateSong(preview){\n        console.log(preview)\n\n        this.audio.src = preview;\n        this.audio.currentTime = 0;\n        this.audio.play();\n    }\n}\nconst AudioController = new AUDIO_CONTROLLER()\nexport default AudioController"],"mappings":"AAAA,MAAMA,gBAAgB;EAClBC,KAAKA,CAAA,EAAE;IACH,IAAI,CAACC,GAAG,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAEnE,IAAI,CAACC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;IACxB,IAAI,CAACD,KAAK,CAACE,MAAM,GAAG,GAAG;IACvB,IAAI,CAACF,KAAK,CAACG,WAAW,GAAG,WAAW;IAEpC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACR,GAAG,CAACS,wBAAwB,CAAC,IAAI,CAACL,KAAK,CAAC;IAChE,IAAI,CAACM,QAAQ,GAAG,IAAIC,YAAY,CAAC,IAAI,CAACX,GAAG,EAAC;MACtCY,OAAO,EAAC,IAAI;MACZC,qBAAqB,EAAG;IAC5B,CAAC,CAAC;IACF,IAAI,CAACC,KAAK,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACL,QAAQ,CAACM,iBAAiB,CAAC;IAC5DC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,KAAK,CAAC;IAEvB,IAAI,CAACN,WAAW,CAACW,OAAO,CAAC,IAAI,CAACT,QAAQ,CAAC;IACvC,IAAI,CAACF,WAAW,CAACW,OAAO,CAAC,IAAI,CAACnB,GAAG,CAACoB,WAAW,CAAC;IAE9C,IAAI,CAACV,QAAQ,CAACW,oBAAoB,CAAC,IAAI,CAACP,KAAK,CAAC;EAClD;EACAQ,UAAUA,CAACC,OAAO,EAAC;IACfN,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC;IAEpB,IAAI,CAACnB,KAAK,CAACoB,GAAG,GAAGD,OAAO;IACxB,IAAI,CAACnB,KAAK,CAACqB,WAAW,GAAG,CAAC;IAC1B,IAAI,CAACrB,KAAK,CAACsB,IAAI,CAAC,CAAC;EACrB;AACJ;AACA,MAAMC,eAAe,GAAG,IAAI7B,gBAAgB,CAAC,CAAC;AAC9C,eAAe6B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}