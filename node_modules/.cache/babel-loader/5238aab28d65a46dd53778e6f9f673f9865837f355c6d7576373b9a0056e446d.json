{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n    this.material = new THREE.MeshNormalMaterial({\n      color: 0xffff00\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    console.log(this.mesh);\n    this.k = 3; // Facteur de déformation\n  }\n\n  update() {\n    const time = performance.now() * 0.003;\n    for (let i = 0; i < this.geometry.vertices.length; i++) {\n      const p = this.geometry.vertices[i];\n      p.normalize().multiplyScalar(1 + 0.3 * this.deformVertex(p, time));\n    }\n    this.geometry.computeVertexNormals();\n    this.geometry.normalsNeedUpdate = true;\n    this.geometry.verticesNeedUpdate = true;\n  }\n  deformVertex(vertex, time) {\n    // Cette fonction simule la déformation de vertex en utilisant le bruit de Perlin.\n    // Vous devrez remplacer noise.perlin3 par la fonction de bruit de Perlin que vous utilisez.\n\n    const x = vertex.x * this.k + time;\n    const y = vertex.y * this.k;\n    const z = vertex.z * this.k;\n\n    // Remplacez cette ligne par votre propre fonction de bruit de Perlin.\n    return noise.perlin3(x, y, z);\n  }\n  tick() {\n    this.mesh.rotation.x += 0.01;\n    const time = performance.now() * 0.003;\n    for (let i = 0; i < this.geometry.vertices.length; i++) {\n      const p = this.geometry.vertices[i];\n      p.normalize().multiplyScalar(1 + 0.3 * this.deformVertex(p, time));\n    }\n    this.geometry.computeVertexNormals();\n    this.geometry.normalsNeedUpdate = true;\n    this.geometry.verticesNeedUpdate = true;\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","geometry","SphereGeometry","material","MeshNormalMaterial","color","mesh","Mesh","console","log","k","update","time","performance","now","i","vertices","length","p","normalize","multiplyScalar","deformVertex","computeVertexNormals","normalsNeedUpdate","verticesNeedUpdate","vertex","x","y","z","noise","perlin3","tick","rotation"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.SphereGeometry(15, 32, 16);\n        this.material = new THREE.MeshNormalMaterial({ color: 0xffff00 });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        console.log(this.mesh);\n        this.k = 3; // Facteur de déformation\n    }\n\n    update() {\n        const time = performance.now() * 0.003;\n\n        for (let i = 0; i < this.geometry.vertices.length; i++) {\n            const p = this.geometry.vertices[i];\n            p.normalize().multiplyScalar(1 + 0.3 * this.deformVertex(p, time));\n        }\n\n        this.geometry.computeVertexNormals();\n        this.geometry.normalsNeedUpdate = true;\n        this.geometry.verticesNeedUpdate = true;\n    }\n\n    deformVertex(vertex, time) {\n        // Cette fonction simule la déformation de vertex en utilisant le bruit de Perlin.\n        // Vous devrez remplacer noise.perlin3 par la fonction de bruit de Perlin que vous utilisez.\n\n        const x = vertex.x * this.k + time;\n        const y = vertex.y * this.k;\n        const z = vertex.z * this.k;\n\n        // Remplacez cette ligne par votre propre fonction de bruit de Perlin.\n        return noise.perlin3(x, y, z);\n    }\n\n    tick() {\n        this.mesh.rotation.x += 0.01;\n\n        const time = performance.now() * 0.003;\n        for (let i = 0; i < this.geometry.vertices.length; i++) {\n            const p = this.geometry.vertices[i];\n            p.normalize().multiplyScalar(1 + 0.3 * this.deformVertex(p, time));\n        }\n\n        this.geometry.computeVertexNormals();\n        this.geometry.normalsNeedUpdate = true;\n        this.geometry.verticesNeedUpdate = true;\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpD,IAAI,CAACC,QAAQ,GAAG,IAAIN,KAAK,CAACO,kBAAkB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,IAAI,CAACC,IAAI,GAAG,IAAIT,KAAK,CAACU,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACE,QAAQ,CAAC;IACxDK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,CAAC;IACtB,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC;EAChB;;EAEAC,MAAMA,CAAA,EAAG;IACL,MAAMC,IAAI,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK;IAEtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACpD,MAAMG,CAAC,GAAG,IAAI,CAACjB,QAAQ,CAACe,QAAQ,CAACD,CAAC,CAAC;MACnCG,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAACC,YAAY,CAACH,CAAC,EAAEN,IAAI,CAAC,CAAC;IACtE;IAEA,IAAI,CAACX,QAAQ,CAACqB,oBAAoB,CAAC,CAAC;IACpC,IAAI,CAACrB,QAAQ,CAACsB,iBAAiB,GAAG,IAAI;IACtC,IAAI,CAACtB,QAAQ,CAACuB,kBAAkB,GAAG,IAAI;EAC3C;EAEAH,YAAYA,CAACI,MAAM,EAAEb,IAAI,EAAE;IACvB;IACA;;IAEA,MAAMc,CAAC,GAAGD,MAAM,CAACC,CAAC,GAAG,IAAI,CAAChB,CAAC,GAAGE,IAAI;IAClC,MAAMe,CAAC,GAAGF,MAAM,CAACE,CAAC,GAAG,IAAI,CAACjB,CAAC;IAC3B,MAAMkB,CAAC,GAAGH,MAAM,CAACG,CAAC,GAAG,IAAI,CAAClB,CAAC;;IAE3B;IACA,OAAOmB,KAAK,CAACC,OAAO,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACjC;EAEAG,IAAIA,CAAA,EAAG;IACH,IAAI,CAACzB,IAAI,CAAC0B,QAAQ,CAACN,CAAC,IAAI,IAAI;IAE5B,MAAMd,IAAI,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACpD,MAAMG,CAAC,GAAG,IAAI,CAACjB,QAAQ,CAACe,QAAQ,CAACD,CAAC,CAAC;MACnCG,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAACC,YAAY,CAACH,CAAC,EAAEN,IAAI,CAAC,CAAC;IACtE;IAEA,IAAI,CAACX,QAAQ,CAACqB,oBAAoB,CAAC,CAAC;IACpC,IAAI,CAACrB,QAAQ,CAACsB,iBAAiB,GAAG,IAAI;IACtC,IAAI,CAACtB,QAAQ,CAACuB,kBAAkB,GAAG,IAAI;EAC3C;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}