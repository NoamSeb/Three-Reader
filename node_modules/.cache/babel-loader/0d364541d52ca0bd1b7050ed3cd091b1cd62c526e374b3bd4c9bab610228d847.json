{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.BufferGeometry(15, 32, 16);\n    const vertices = new Float32Array([-1.0, -1.0, 1.0,\n    // v0\n    1.0, -1.0, 1.0,\n    // v1\n    1.0, 1.0, 1.0,\n    // v2\n\n    1.0, 1.0, 1.0,\n    // v3\n    -1.0, 1.0, 1.0,\n    // v4\n    -1.0, -1.0, 1.0 // v5\n    ]);\n\n    this.geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    this.material = new THREE.MeshNormalMaterial({\n      wireframe: true\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    console.log(this.mesh);\n    this.group = new THREE.Group();\n    this.group.add(this.mesh);\n  }\n  tick() {\n    const remapped = AudioController.fdata[0] / 255;\n\n    // this.mesh.geometry.verticesNeedUpdate.set(\n    //     1 + remapped,\n    //     1 + remapped,\n    //     1 + remapped)\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","geometry","BufferGeometry","vertices","Float32Array","setAttribute","BufferAttribute","material","MeshNormalMaterial","wireframe","mesh","Mesh","console","log","group","Group","add","tick","remapped","fdata"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three'\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.BufferGeometry(15, 32, 16);\n\n        const vertices = new Float32Array([\n            -1.0, -1.0, 1.0, // v0\n            1.0, -1.0, 1.0, // v1\n            1.0, 1.0, 1.0, // v2\n\n            1.0, 1.0, 1.0, // v3\n            -1.0, 1.0, 1.0, // v4\n            -1.0, -1.0, 1.0  // v5\n        ]);\n        this.geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        this.material = new THREE.MeshNormalMaterial({\n            wireframe: true\n        });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        console.log(this.mesh)\n        this.group = new THREE.Group();\n        this.group.add(this.mesh)\n    }\n    tick() {\n        const remapped = AudioController.fdata[0] / 255;\n\n        // this.mesh.geometry.verticesNeedUpdate.set(\n        //     1 + remapped,\n        //     1 + remapped,\n        //     1 + remapped)\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAEpD,MAAMC,QAAQ,GAAG,IAAIC,YAAY,CAAC,CAC9B,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;IAAE;IACjB,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;IAAE;IAChB,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE;;IAEf,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE;IACf,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE;IAChB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAE;IAAA,CACpB,CAAC;;IACF,IAAI,CAACH,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIR,KAAK,CAACS,eAAe,CAACH,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACI,QAAQ,GAAG,IAAIV,KAAK,CAACW,kBAAkB,CAAC;MACzCC,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAI,CAACC,IAAI,GAAG,IAAIb,KAAK,CAACc,IAAI,CAAC,IAAI,CAACV,QAAQ,EAAE,IAAI,CAACM,QAAQ,CAAC;IACxDK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,CAAC;IACtB,IAAI,CAACI,KAAK,GAAG,IAAIjB,KAAK,CAACkB,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACD,KAAK,CAACE,GAAG,CAAC,IAAI,CAACN,IAAI,CAAC;EAC7B;EACAO,IAAIA,CAAA,EAAG;IACH,MAAMC,QAAQ,GAAGpB,eAAe,CAACqB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;;IAE/C;IACA;IACA;IACA;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}