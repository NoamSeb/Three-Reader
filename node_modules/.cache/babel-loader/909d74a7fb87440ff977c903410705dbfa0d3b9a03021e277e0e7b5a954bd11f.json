{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.BufferGeometry();\n\n    // Créez un tableau pour les positions des particules.\n    const positions = new Float32Array(32 * 16 * 3); // 32 segments x 16 rings x 3 (x, y, z)\n\n    // Remplissez le tableau avec des positions de particules.\n    for (let i = 0; i < 32; i++) {\n      for (let j = 0; j < 16; j++) {\n        const index = (i * 16 + j) * 3;\n        const phi = i / 32 * Math.PI * 2;\n        const theta = j / 16 * Math.PI;\n        const radius = 15;\n        positions[index] = radius * Math.sin(theta) * Math.cos(phi);\n        positions[index + 1] = radius * Math.sin(theta) * Math.sin(phi);\n        positions[index + 2] = radius * Math.cos(theta);\n      }\n    }\n    this.geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    this.material = new THREE.PointsMaterial({\n      color: 0x00ff00\n    });\n    this.mesh = new THREE.Points(this.geometry, this.material);\n    this.group = new THREE.Group();\n    this.group.add(this.mesh);\n  }\n  tick() {\n    const remapped = AudioController.fdata[0] / 255;\n\n    // Mettez à l'échelle le groupe de particules.\n    this.group.scale.set(1 + remapped, 1 + remapped, 1 + remapped);\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","geometry","BufferGeometry","positions","Float32Array","i","j","index","phi","Math","PI","theta","radius","sin","cos","setAttribute","BufferAttribute","material","PointsMaterial","color","mesh","Points","group","Group","add","tick","remapped","fdata","scale","set"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.BufferGeometry();\n        \n        // Créez un tableau pour les positions des particules.\n        const positions = new Float32Array(32 * 16 * 3); // 32 segments x 16 rings x 3 (x, y, z)\n        \n        // Remplissez le tableau avec des positions de particules.\n        for (let i = 0; i < 32; i++) {\n            for (let j = 0; j < 16; j++) {\n                const index = (i * 16 + j) * 3;\n                const phi = (i / 32) * Math.PI * 2;\n                const theta = (j / 16) * Math.PI;\n                const radius = 15;\n                positions[index] = radius * Math.sin(theta) * Math.cos(phi);\n                positions[index + 1] = radius * Math.sin(theta) * Math.sin(phi);\n                positions[index + 2] = radius * Math.cos(theta);\n            }\n        }\n        \n        this.geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        this.material = new THREE.PointsMaterial({ color: 0x00ff00 });\n        this.mesh = new THREE.Points(this.geometry, this.material);\n        this.group = new THREE.Group();\n        this.group.add(this.mesh);\n    }\n    \n    tick() {\n        const remapped = AudioController.fdata[0] / 255;\n\n        // Mettez à l'échelle le groupe de particules.\n        this.group.scale.set(1 + remapped, 1 + remapped, 1 + remapped);\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,CAAC;;IAE1C;IACA,MAAMC,SAAS,GAAG,IAAIC,YAAY,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEjD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACzB,MAAMC,KAAK,GAAG,CAACF,CAAC,GAAG,EAAE,GAAGC,CAAC,IAAI,CAAC;QAC9B,MAAME,GAAG,GAAIH,CAAC,GAAG,EAAE,GAAII,IAAI,CAACC,EAAE,GAAG,CAAC;QAClC,MAAMC,KAAK,GAAIL,CAAC,GAAG,EAAE,GAAIG,IAAI,CAACC,EAAE;QAChC,MAAME,MAAM,GAAG,EAAE;QACjBT,SAAS,CAACI,KAAK,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACI,GAAG,CAACF,KAAK,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACN,GAAG,CAAC;QAC3DL,SAAS,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACI,GAAG,CAACF,KAAK,CAAC,GAAGF,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QAC/DL,SAAS,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACK,GAAG,CAACH,KAAK,CAAC;MACnD;IACJ;IAEA,IAAI,CAACV,QAAQ,CAACc,YAAY,CAAC,UAAU,EAAE,IAAIlB,KAAK,CAACmB,eAAe,CAACb,SAAS,EAAE,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACc,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,cAAc,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAG,IAAIvB,KAAK,CAACwB,MAAM,CAAC,IAAI,CAACpB,QAAQ,EAAE,IAAI,CAACgB,QAAQ,CAAC;IAC1D,IAAI,CAACK,KAAK,GAAG,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACD,KAAK,CAACE,GAAG,CAAC,IAAI,CAACJ,IAAI,CAAC;EAC7B;EAEAK,IAAIA,CAAA,EAAG;IACH,MAAMC,QAAQ,GAAG5B,eAAe,CAAC6B,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;;IAE/C;IACA,IAAI,CAACL,KAAK,CAACM,KAAK,CAACC,GAAG,CAAC,CAAC,GAAGH,QAAQ,EAAE,CAAC,GAAGA,QAAQ,EAAE,CAAC,GAAGA,QAAQ,CAAC;EAClE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}