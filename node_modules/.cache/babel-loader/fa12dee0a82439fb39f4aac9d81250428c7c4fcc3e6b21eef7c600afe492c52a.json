{"ast":null,"code":"import * as THREE from \"three\";\nclass SCENE {\n  constructor() {\n    this.animate = () => {\n      requestAnimationFrame(this.animate);\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n  setup(canvas) {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.canvas = canvas;\n    this.setupScene();\n    this.setupCamera();\n    this.setupRenderer();\n    this.addObjects();\n  }\n  setupScene() {\n    this.scene = new THREE.Scene();\n  }\n  setupCamera() {\n    this.camera = new THREE.PerspectiveCamera(28, this.width / this.height, 0.1, 10000);\n  }\n  setupRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false,\n      depth: false,\n      alpha: true\n    });\n    this.renderer.toneMapping = THREE.NoToneMapping;\n    this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n    this.renderer.setClearColor(0x000000);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  }\n  addObjects() {\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    this.scene.add(cube);\n    this.camera.position.z = 5;\n  }\n}\nconst Scene = new SCENE();\nexport default Scene;","map":{"version":3,"names":["THREE","SCENE","constructor","animate","requestAnimationFrame","renderer","render","scene","camera","setup","canvas","width","window","innerWidth","height","innerHeight","setupScene","setupCamera","setupRenderer","addObjects","Scene","PerspectiveCamera","WebGLRenderer","antialias","powerPreference","stencil","depth","alpha","toneMapping","NoToneMapping","outputColorSpace","SRGBColorSpace","setClearColor","setSize","setPixelRatio","Math","min","devicePixelRatio","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/Scene.js"],"sourcesContent":["import * as THREE from \"three\";\n\nclass SCENE {\n    setup(canvas) {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.canvas = canvas;\n\n        this.setupScene();\n        this.setupCamera();\n        this.setupRenderer();\n\n        this.addObjects();\n    }\n\n    setupScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    setupCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n            28,\n            this.width / this.height,\n            0.1,\n            10000\n        );\n    }\n\n    setupRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true,\n            powerPreference: \"high-performance\",\n            stencil: false,\n            depth: false,\n            alpha: true\n        });\n\n        this.renderer.toneMapping = THREE.NoToneMapping;\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        this.renderer.setClearColor(0x000000);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    }\n\n    addObjects() {\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const cube = new THREE.Mesh(geometry, material);\n        this.scene.add(cube);\n\n        this.camera.position.z = 5;\n    }\n    animate = () => {\n        requestAnimationFrame(this.animate);\n        this.renderer.render(this.scene, this.camera);\n\n    }\n}\n\nconst Scene = new SCENE();\nexport default Scene;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,MAAMC,KAAK,CAAC;EAAAC,YAAA;IAAA,KAoDRC,OAAO,GAAG,MAAM;MACZC,qBAAqB,CAAC,IAAI,CAACD,OAAO,CAAC;MACnC,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IAEjD,CAAC;EAAA;EAvDDC,KAAKA,CAACC,MAAM,EAAE;IACV,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACC,UAAU;IAC9B,IAAI,CAACC,MAAM,GAAGF,MAAM,CAACG,WAAW;IAChC,IAAI,CAACL,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACM,UAAU,CAAC,CAAC;IACjB,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,aAAa,CAAC,CAAC;IAEpB,IAAI,CAACC,UAAU,CAAC,CAAC;EACrB;EAEAH,UAAUA,CAAA,EAAG;IACT,IAAI,CAACT,KAAK,GAAG,IAAIP,KAAK,CAACoB,KAAK,CAAC,CAAC;EAClC;EAEAH,WAAWA,CAAA,EAAG;IACV,IAAI,CAACT,MAAM,GAAG,IAAIR,KAAK,CAACqB,iBAAiB,CACrC,EAAE,EACF,IAAI,CAACV,KAAK,GAAG,IAAI,CAACG,MAAM,EACxB,GAAG,EACH,KACJ,CAAC;EACL;EAEAI,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACb,QAAQ,GAAG,IAAIL,KAAK,CAACsB,aAAa,CAAC;MACpCZ,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBa,SAAS,EAAE,IAAI;MACfC,eAAe,EAAE,kBAAkB;MACnCC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE;IACX,CAAC,CAAC;IAEF,IAAI,CAACtB,QAAQ,CAACuB,WAAW,GAAG5B,KAAK,CAAC6B,aAAa;IAC/C,IAAI,CAACxB,QAAQ,CAACyB,gBAAgB,GAAG9B,KAAK,CAAC+B,cAAc;IAErD,IAAI,CAAC1B,QAAQ,CAAC2B,aAAa,CAAC,QAAQ,CAAC;IACrC,IAAI,CAAC3B,QAAQ,CAAC4B,OAAO,CAAC,IAAI,CAACtB,KAAK,EAAE,IAAI,CAACG,MAAM,CAAC;IAC9C,IAAI,CAACT,QAAQ,CAAC6B,aAAa,CAACC,IAAI,CAACC,GAAG,CAACxB,MAAM,CAACyB,gBAAgB,EAAE,CAAC,CAAC,CAAC;EACrE;EAEAlB,UAAUA,CAAA,EAAG;IACT,MAAMmB,QAAQ,GAAG,IAAItC,KAAK,CAACuC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/C,MAAMC,QAAQ,GAAG,IAAIxC,KAAK,CAACyC,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,MAAMC,IAAI,GAAG,IAAI3C,KAAK,CAAC4C,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;IAC/C,IAAI,CAACjC,KAAK,CAACsC,GAAG,CAACF,IAAI,CAAC;IAEpB,IAAI,CAACnC,MAAM,CAACsC,QAAQ,CAACC,CAAC,GAAG,CAAC;EAC9B;AAMJ;AAEA,MAAM3B,KAAK,GAAG,IAAInB,KAAK,CAAC,CAAC;AACzB,eAAemB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}