{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.update = () => {\n      var time = performance.now() * 0.003;\n      var k = 3;\n      for (var i = 0; i < sphere.geometry.vertices.length; i++) {\n        var p = sphere.geometry.vertices[i];\n        p.normalize().multiplyScalar(1 + 0.3 * noise.perlin3(p.x * k + time, p.y * k, p.z * k));\n      }\n      sphere.geometry.computeVertexNormals();\n      sphere.geometry.normalsNeedUpdate = true;\n      sphere.geometry.verticesNeedUpdate = true;\n    };\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n    this.material = new THREE.MeshNormalMaterial({\n      color: 0xffff00\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    console.log(this.mesh);\n  }\n  tick() {\n    this.mesh.rotation.x += 0.01;\n    const remapped = AudioController.fdata[0] / 255;\n\n    // this.mesh.scale.set(\n    //     1 + remapped,\n    //     1 + remapped,\n    //     1 + remapped)\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","update","time","performance","now","k","i","sphere","geometry","vertices","length","p","normalize","multiplyScalar","noise","perlin3","x","y","z","computeVertexNormals","normalsNeedUpdate","verticesNeedUpdate","SphereGeometry","material","MeshNormalMaterial","color","mesh","Mesh","console","log","tick","rotation","remapped","fdata"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three'\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.SphereGeometry(15, 32, 16);\n        this.material = new THREE.MeshNormalMaterial({ color: 0xffff00 });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        console.log(this.mesh)\n    }\n    tick() {\n        this.mesh.rotation.x += 0.01;\n\n        const remapped = AudioController.fdata[0] / 255;\n\n        // this.mesh.scale.set(\n        //     1 + remapped,\n        //     1 + remapped,\n        //     1 + remapped)\n    }\n    update = () => {\n        var time = performance.now() * 0.003;\n        var k = 3;\n        for (var i = 0; i < sphere.geometry.vertices.length; i++) {\n          var p = sphere.geometry.vertices[i];\n          p.normalize().multiplyScalar(1 + 0.3 * noise.perlin3(p.x * k + time, p.y * k, p.z * k));\n        }\n        sphere.geometry.computeVertexNormals();\n        sphere.geometry.normalsNeedUpdate = true;\n        sphere.geometry.verticesNeedUpdate = true;\n      }\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IAAA,KAgBdC,MAAM,GAAG,MAAM;MACX,IAAIC,IAAI,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK;MACpC,IAAIC,CAAC,GAAG,CAAC;MACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACxD,IAAIK,CAAC,GAAGJ,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACH,CAAC,CAAC;QACnCK,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,GAAG,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACJ,CAAC,CAACK,CAAC,GAAGX,CAAC,GAAGH,IAAI,EAAES,CAAC,CAACM,CAAC,GAAGZ,CAAC,EAAEM,CAAC,CAACO,CAAC,GAAGb,CAAC,CAAC,CAAC;MACzF;MACAE,MAAM,CAACC,QAAQ,CAACW,oBAAoB,CAAC,CAAC;MACtCZ,MAAM,CAACC,QAAQ,CAACY,iBAAiB,GAAG,IAAI;MACxCb,MAAM,CAACC,QAAQ,CAACa,kBAAkB,GAAG,IAAI;IAC3C,CAAC;IAzBC,IAAI,CAACb,QAAQ,GAAG,IAAIX,KAAK,CAACyB,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpD,IAAI,CAACC,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,kBAAkB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,IAAI,CAACC,IAAI,GAAG,IAAI7B,KAAK,CAAC8B,IAAI,CAAC,IAAI,CAACnB,QAAQ,EAAE,IAAI,CAACe,QAAQ,CAAC;IACxDK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,CAAC;EAC1B;EACAI,IAAIA,CAAA,EAAG;IACH,IAAI,CAACJ,IAAI,CAACK,QAAQ,CAACf,CAAC,IAAI,IAAI;IAE5B,MAAMgB,QAAQ,GAAGlC,eAAe,CAACmC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;;IAE/C;IACA;IACA;IACA;EACJ;AAYJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}