{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.BufferGeometry();\n\n    // Augmentez le nombre de segments et d'anneaux pour plus de particules.\n    const segments = 64;\n    const rings = 32;\n    const positions = new Float32Array(segments * rings * 3);\n    for (let i = 0; i < segments; i++) {\n      for (let j = 0; j < rings; j++) {\n        const index = (i * rings + j) * 3;\n        const phi = i / segments * Math.PI * 2;\n        const theta = j / rings * Math.PI;\n        const radius = 15;\n        positions[index] = radius * Math.sin(theta) * Math.cos(phi);\n        positions[index + 1] = radius * Math.sin(theta) * Math.sin(phi);\n        positions[index + 2] = radius * Math.cos(theta);\n      }\n    }\n    this.geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    this.material = new THREE.PointsMaterial({\n      color: 0x00ff00\n    });\n    this.mesh = new THREE.Points(this.geometry, this.material);\n    this.group = new THREE.Group();\n    this.group.add(this.mesh);\n\n    // Appliquez une rotation de 90 degrés autour de l'axe X.\n    this.group.rotation.x = Math.PI / 2;\n  }\n  tick() {\n    const remapped = AudioController.fdata[0] / 255;\n\n    // Récupérez la position des particules.\n    const positions = this.geometry.attributes.position.array;\n\n    // Force d'attraction vers la position d'origine.\n    const attractionForce = 0.01;\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      const originalX = this.originalPositions[i];\n      const originalY = this.originalPositions[i + 1];\n      const originalZ = this.originalPositions[i + 2];\n\n      // Calculez la force d'attraction vers la position d'origine.\n      const attractionX = (originalX - x) * attractionForce;\n      const attractionY = (originalY - y) * attractionForce;\n      const attractionZ = (originalZ - z) * attractionForce;\n\n      // Appliquez la force d'attraction.\n      positions[i] += attractionX;\n      positions[i + 1] += attractionY;\n      positions[i + 2] += attractionZ;\n    }\n\n    // Mettez à jour la géométrie des particules.\n    this.geometry.attributes.position.needsUpdate = true;\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","geometry","BufferGeometry","segments","rings","positions","Float32Array","i","j","index","phi","Math","PI","theta","radius","sin","cos","setAttribute","BufferAttribute","material","PointsMaterial","color","mesh","Points","group","Group","add","rotation","x","tick","remapped","fdata","attributes","position","array","attractionForce","length","y","z","originalX","originalPositions","originalY","originalZ","attractionX","attractionY","attractionZ","needsUpdate"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.BufferGeometry();\n\n        // Augmentez le nombre de segments et d'anneaux pour plus de particules.\n        const segments = 64;\n        const rings = 32;\n        const positions = new Float32Array(segments * rings * 3);\n\n        for (let i = 0; i < segments; i++) {\n            for (let j = 0; j < rings; j++) {\n                const index = (i * rings + j) * 3;\n                const phi = (i / segments) * Math.PI * 2;\n                const theta = (j / rings) * Math.PI;\n                const radius = 15;\n                positions[index] = radius * Math.sin(theta) * Math.cos(phi);\n                positions[index + 1] = radius * Math.sin(theta) * Math.sin(phi);\n                positions[index + 2] = radius * Math.cos(theta);\n            }\n        }\n\n        this.geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        this.material = new THREE.PointsMaterial({ color: 0x00ff00 });\n        this.mesh = new THREE.Points(this.geometry, this.material);\n        this.group = new THREE.Group();\n        this.group.add(this.mesh);\n\n        // Appliquez une rotation de 90 degrés autour de l'axe X.\n        this.group.rotation.x = Math.PI / 2;\n    }\n\n    tick() {\n        const remapped = AudioController.fdata[0] / 255;\n\n        // Récupérez la position des particules.\n        const positions = this.geometry.attributes.position.array;\n\n        // Force d'attraction vers la position d'origine.\n        const attractionForce = 0.01;\n\n        for (let i = 0; i < positions.length; i += 3) {\n            const x = positions[i];\n            const y = positions[i + 1];\n            const z = positions[i + 2];\n            const originalX = this.originalPositions[i];\n            const originalY = this.originalPositions[i + 1];\n            const originalZ = this.originalPositions[i + 2];\n\n            // Calculez la force d'attraction vers la position d'origine.\n            const attractionX = (originalX - x) * attractionForce;\n            const attractionY = (originalY - y) * attractionForce;\n            const attractionZ = (originalZ - z) * attractionForce;\n\n            // Appliquez la force d'attraction.\n            positions[i] += attractionX;\n            positions[i + 1] += attractionY;\n            positions[i + 2] += attractionZ;\n        }\n\n        // Mettez à jour la géométrie des particules.\n        this.geometry.attributes.position.needsUpdate = true;\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,CAAC;;IAE1C;IACA,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,SAAS,GAAG,IAAIC,YAAY,CAACH,QAAQ,GAAGC,KAAK,GAAG,CAAC,CAAC;IAExD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;MAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;QAC5B,MAAMC,KAAK,GAAG,CAACF,CAAC,GAAGH,KAAK,GAAGI,CAAC,IAAI,CAAC;QACjC,MAAME,GAAG,GAAIH,CAAC,GAAGJ,QAAQ,GAAIQ,IAAI,CAACC,EAAE,GAAG,CAAC;QACxC,MAAMC,KAAK,GAAIL,CAAC,GAAGJ,KAAK,GAAIO,IAAI,CAACC,EAAE;QACnC,MAAME,MAAM,GAAG,EAAE;QACjBT,SAAS,CAACI,KAAK,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACI,GAAG,CAACF,KAAK,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACN,GAAG,CAAC;QAC3DL,SAAS,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACI,GAAG,CAACF,KAAK,CAAC,GAAGF,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QAC/DL,SAAS,CAACI,KAAK,GAAG,CAAC,CAAC,GAAGK,MAAM,GAAGH,IAAI,CAACK,GAAG,CAACH,KAAK,CAAC;MACnD;IACJ;IAEA,IAAI,CAACZ,QAAQ,CAACgB,YAAY,CAAC,UAAU,EAAE,IAAIpB,KAAK,CAACqB,eAAe,CAACb,SAAS,EAAE,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACc,QAAQ,GAAG,IAAItB,KAAK,CAACuB,cAAc,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAG,IAAIzB,KAAK,CAAC0B,MAAM,CAAC,IAAI,CAACtB,QAAQ,EAAE,IAAI,CAACkB,QAAQ,CAAC;IAC1D,IAAI,CAACK,KAAK,GAAG,IAAI3B,KAAK,CAAC4B,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACD,KAAK,CAACE,GAAG,CAAC,IAAI,CAACJ,IAAI,CAAC;;IAEzB;IACA,IAAI,CAACE,KAAK,CAACG,QAAQ,CAACC,CAAC,GAAGjB,IAAI,CAACC,EAAE,GAAG,CAAC;EACvC;EAEAiB,IAAIA,CAAA,EAAG;IACH,MAAMC,QAAQ,GAAGhC,eAAe,CAACiC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;;IAE/C;IACA,MAAM1B,SAAS,GAAG,IAAI,CAACJ,QAAQ,CAAC+B,UAAU,CAACC,QAAQ,CAACC,KAAK;;IAEzD;IACA,MAAMC,eAAe,GAAG,IAAI;IAE5B,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC+B,MAAM,EAAE7B,CAAC,IAAI,CAAC,EAAE;MAC1C,MAAMqB,CAAC,GAAGvB,SAAS,CAACE,CAAC,CAAC;MACtB,MAAM8B,CAAC,GAAGhC,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC;MAC1B,MAAM+B,CAAC,GAAGjC,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC;MAC1B,MAAMgC,SAAS,GAAG,IAAI,CAACC,iBAAiB,CAACjC,CAAC,CAAC;MAC3C,MAAMkC,SAAS,GAAG,IAAI,CAACD,iBAAiB,CAACjC,CAAC,GAAG,CAAC,CAAC;MAC/C,MAAMmC,SAAS,GAAG,IAAI,CAACF,iBAAiB,CAACjC,CAAC,GAAG,CAAC,CAAC;;MAE/C;MACA,MAAMoC,WAAW,GAAG,CAACJ,SAAS,GAAGX,CAAC,IAAIO,eAAe;MACrD,MAAMS,WAAW,GAAG,CAACH,SAAS,GAAGJ,CAAC,IAAIF,eAAe;MACrD,MAAMU,WAAW,GAAG,CAACH,SAAS,GAAGJ,CAAC,IAAIH,eAAe;;MAErD;MACA9B,SAAS,CAACE,CAAC,CAAC,IAAIoC,WAAW;MAC3BtC,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIqC,WAAW;MAC/BvC,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIsC,WAAW;IACnC;;IAEA;IACA,IAAI,CAAC5C,QAAQ,CAAC+B,UAAU,CAACC,QAAQ,CAACa,WAAW,GAAG,IAAI;EACxD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}