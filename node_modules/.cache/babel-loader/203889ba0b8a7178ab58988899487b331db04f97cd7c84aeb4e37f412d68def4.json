{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    const particleCount = 1000;\n    const sphereRadius = 5;\n    this.geometry = new THREE.SphereBufferGeometry(sphereRadius, 32, 32);\n    this.material = new new THREE.PointsMaterial({\n      color: 0x00ff00,\n      size: 0.1\n    })();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    for (let i = 0; i < particleCount; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      const x = sphereRadius * Math.sin(phi) * Math.cos(theta);\n      const y = sphereRadius * Math.sin(phi) * Math.sin(theta);\n      const z = sphereRadius * Math.cos(phi);\n      particlesPositions[i * 3] = x;\n      particlesPositions[i * 3 + 1] = y;\n      particlesPositions[i * 3 + 2] = z;\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(particlesPositions, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      color: 0xff0000,\n      size: 0.03\n    });\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particles);\n    console.log(this.mesh);\n    this.group = new THREE.Group();\n    this.group.add(this.mesh);\n  }\n  tick() {\n    const remapped = AudioController.fdata[0] / 255;\n\n    // this.mesh.geometry.verticesNeedUpdate.set(\n    //     1 + remapped,\n    //     1 + remapped,\n    //     1 + remapped)\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","particleCount","sphereRadius","geometry","SphereBufferGeometry","material","PointsMaterial","color","size","mesh","Mesh","i","theta","Math","random","PI","phi","x","sin","cos","y","z","particlesPositions","particlesGeometry","setAttribute","BufferAttribute","particlesMaterial","particles","Points","scene","add","console","log","group","Group","tick","remapped","fdata"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three'\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        const particleCount = 1000;\n        const sphereRadius = 5;\n\n        this.geometry = new THREE.SphereBufferGeometry(sphereRadius, 32, 32);\n        this.material = new new THREE.PointsMaterial({ color: 0x00ff00, size: 0.1 });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n\n        for (let i = 0; i < particleCount; i++) {\n            const theta = Math.random() * Math.PI * 2;\n            const phi = Math.random() * Math.PI;\n            const x = sphereRadius * Math.sin(phi) * Math.cos(theta);\n            const y = sphereRadius * Math.sin(phi) * Math.sin(theta);\n            const z = sphereRadius * Math.cos(phi);\n\n            particlesPositions[i * 3] = x;\n            particlesPositions[i * 3 + 1] = y;\n            particlesPositions[i * 3 + 2] = z;\n        }\n\n        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(particlesPositions, 3));\n        const particlesMaterial = new THREE.PointsMaterial({ color: 0xff0000, size: 0.03 });\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        \n        scene.add(particles);\n        console.log(this.mesh)\n        this.group = new THREE.Group();\n        this.group.add(this.mesh)\n    }\n    tick() {\n        const remapped = AudioController.fdata[0] / 255;\n\n        // this.mesh.geometry.verticesNeedUpdate.set(\n        //     1 + remapped,\n        //     1 + remapped,\n        //     1 + remapped)\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,MAAMC,aAAa,GAAG,IAAI;IAC1B,MAAMC,YAAY,GAAG,CAAC;IAEtB,IAAI,CAACC,QAAQ,GAAG,IAAIN,KAAK,CAACO,oBAAoB,CAACF,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC;IACpE,IAAI,CAACG,QAAQ,GAAG,IAAI,IAAIR,KAAK,CAACS,cAAc,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAI,CAAC,CAAC,CAAD,CAAC;IAC5E,IAAI,CAACC,IAAI,GAAG,IAAIZ,KAAK,CAACa,IAAI,CAAC,IAAI,CAACP,QAAQ,EAAE,IAAI,CAACE,QAAQ,CAAC;IAExD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,aAAa,EAAEU,CAAC,EAAE,EAAE;MACpC,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;MACzC,MAAMC,GAAG,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE;MACnC,MAAME,CAAC,GAAGf,YAAY,GAAGW,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC,GAAGH,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC;MACxD,MAAMQ,CAAC,GAAGlB,YAAY,GAAGW,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC;MACxD,MAAMS,CAAC,GAAGnB,YAAY,GAAGW,IAAI,CAACM,GAAG,CAACH,GAAG,CAAC;MAEtCM,kBAAkB,CAACX,CAAC,GAAG,CAAC,CAAC,GAAGM,CAAC;MAC7BK,kBAAkB,CAACX,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGS,CAAC;MACjCE,kBAAkB,CAACX,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGU,CAAC;IACrC;IAEAE,iBAAiB,CAACC,YAAY,CAAC,UAAU,EAAE,IAAI3B,KAAK,CAAC4B,eAAe,CAACH,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC5F,MAAMI,iBAAiB,GAAG,IAAI7B,KAAK,CAACS,cAAc,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;IACnF,MAAMmB,SAAS,GAAG,IAAI9B,KAAK,CAAC+B,MAAM,CAACL,iBAAiB,EAAEG,iBAAiB,CAAC;IAExEG,KAAK,CAACC,GAAG,CAACH,SAAS,CAAC;IACpBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvB,IAAI,CAAC;IACtB,IAAI,CAACwB,KAAK,GAAG,IAAIpC,KAAK,CAACqC,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACD,KAAK,CAACH,GAAG,CAAC,IAAI,CAACrB,IAAI,CAAC;EAC7B;EACA0B,IAAIA,CAAA,EAAG;IACH,MAAMC,QAAQ,GAAGtC,eAAe,CAACuC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;;IAE/C;IACA;IACA;IACA;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}