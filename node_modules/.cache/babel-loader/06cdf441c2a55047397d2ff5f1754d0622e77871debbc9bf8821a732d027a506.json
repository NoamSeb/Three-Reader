{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nconst vertexShader = `\n  uniform float time;\n  attribute vec3 customPosition;\n\n  void main() {\n    vec3 newPosition = customPosition + vec3(1.0, 1.0, 1.0) * (AudioController.fdata[0] / 255.0);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n  }\n`;\nconst fragmentShader = `\n  void main() {\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n  }\n`;\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n\n    // Add custom position attribute to the geometry\n    const positions = new Float32Array(this.geometry.attributes.position.count * 3);\n    this.geometry.setAttribute('customPosition', new THREE.BufferAttribute(positions, 3));\n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    console.log(this.mesh);\n  }\n  tick(time) {\n    this.mesh.rotation.x += 0.01;\n\n    // Update the 'time' uniform to control animation\n    this.material.uniforms.time.value = time;\n  }\n}","map":{"version":3,"names":["THREE","AudioController","vertexShader","fragmentShader","Sphere","constructor","geometry","SphereGeometry","positions","Float32Array","attributes","position","count","setAttribute","BufferAttribute","material","ShaderMaterial","uniforms","time","value","mesh","Mesh","console","log","tick","rotation","x"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nconst vertexShader = `\n  uniform float time;\n  attribute vec3 customPosition;\n\n  void main() {\n    vec3 newPosition = customPosition + vec3(1.0, 1.0, 1.0) * (AudioController.fdata[0] / 255.0);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n  }\n`;\n\nconst fragmentShader = `\n  void main() {\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n  }\n`;\n\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n    \n    // Add custom position attribute to the geometry\n    const positions = new Float32Array(this.geometry.attributes.position.count * 3);\n    this.geometry.setAttribute('customPosition', new THREE.BufferAttribute(positions, 3));\n    \n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n    });\n    \n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    console.log(this.mesh);\n  }\n  \n  tick(time) {\n    this.mesh.rotation.x += 0.01;\n    \n    // Update the 'time' uniform to control animation\n    this.material.uniforms.time.value = time;\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA,CAAC;AAED,eAAe,MAAMC,MAAM,CAAC;EAC1BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAIN,KAAK,CAACO,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;IAEpD;IACA,MAAMC,SAAS,GAAG,IAAIC,YAAY,CAAC,IAAI,CAACH,QAAQ,CAACI,UAAU,CAACC,QAAQ,CAACC,KAAK,GAAG,CAAC,CAAC;IAC/E,IAAI,CAACN,QAAQ,CAACO,YAAY,CAAC,gBAAgB,EAAE,IAAIb,KAAK,CAACc,eAAe,CAACN,SAAS,EAAE,CAAC,CAAC,CAAC;IAErF,IAAI,CAACO,QAAQ,GAAG,IAAIf,KAAK,CAACgB,cAAc,CAAC;MACvCC,QAAQ,EAAE;QACRC,IAAI,EAAE;UAAEC,KAAK,EAAE;QAAE;MACnB,CAAC;MACDjB,YAAY,EAAEA,YAAY;MAC1BC,cAAc,EAAEA;IAClB,CAAC,CAAC;IAEF,IAAI,CAACiB,IAAI,GAAG,IAAIpB,KAAK,CAACqB,IAAI,CAAC,IAAI,CAACf,QAAQ,EAAE,IAAI,CAACS,QAAQ,CAAC;IACxDO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,CAAC;EACxB;EAEAI,IAAIA,CAACN,IAAI,EAAE;IACT,IAAI,CAACE,IAAI,CAACK,QAAQ,CAACC,CAAC,IAAI,IAAI;;IAE5B;IACA,IAAI,CAACX,QAAQ,CAACE,QAAQ,CAACC,IAAI,CAACC,KAAK,GAAGD,IAAI;EAC1C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}