{"ast":null,"code":"import * as THREE from \"three\";\nimport { gsap } from \"gsap\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls.js\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\n// import Cube from \"./objects/Cube\";\nimport Line from \"./objects/Line\";\n// import Sphere from \"./objects/Sphere\";\n\nclass SCENE {\n  constructor() {\n    this.tick = () => {\n      this.stats.begin();\n\n      // this.cube.tick();\n      // this.sphere.tick();\n      this.line.tick();\n      this.renderer.render(this.scene, this.camera);\n      this.stats.end();\n    };\n  }\n  setup(canvas) {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.canvas = canvas;\n    this.setupScene();\n    this.setupCamera();\n    this.setupOrbit();\n    this.setupStats();\n    this.setupRenderer();\n    this.setupPostprecessing();\n    this.addObjects();\n    this.addEvents();\n  }\n  setupScene() {\n    this.scene = new THREE.Scene();\n  }\n  setupStats() {\n    this.stats = new Stats();\n    document.body.appendChild(this.stats.dom);\n  }\n  setupCamera() {\n    this.camera = new THREE.PerspectiveCamera(28, this.width / this.height, 0.1, 10000);\n    this.camera.position.z = 600;\n  }\n  setupOrbit() {\n    this.control = new OrbitControls(this.camera, this.canvas);\n  }\n  setupRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: false,\n      powerPreference: \"high-performance\",\n      stencil: false,\n      depth: false,\n      alpha: true\n    });\n    this.renderer.toneMapping = THREE.NoToneMapping;\n    this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n    this.renderer.setClearColor(0x000000);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  }\n  setupPostprecessing() {\n    this.composer = new EffectComposer();\n    this.scenePass = new RenderPass();\n    this.bloomPass = new UnrealBloomPass();\n  }\n  addEvents() {\n    gsap.ticker.add(this.tick);\n    window.addEventListener('resize', () => this.resize());\n  }\n  resize() {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n  addObjects() {\n    // this.cube = new Cube();\n\n    // this.scene.add(this.cube.mesh);\n    // this.sphere = new Sphere();\n\n    // this.scene.add(this.sphere);\n    this.line = new Line();\n    this.scene.add(this.line.group);\n  }\n}\nconst Scene = new SCENE();\nexport default Scene;","map":{"version":3,"names":["THREE","gsap","OrbitControls","EffectComposer","RenderPass","UnrealBloomPass","Stats","Line","SCENE","constructor","tick","stats","begin","line","renderer","render","scene","camera","end","setup","canvas","width","window","innerWidth","height","innerHeight","setupScene","setupCamera","setupOrbit","setupStats","setupRenderer","setupPostprecessing","addObjects","addEvents","Scene","document","body","appendChild","dom","PerspectiveCamera","position","z","control","WebGLRenderer","antialias","powerPreference","stencil","depth","alpha","toneMapping","NoToneMapping","outputColorSpace","SRGBColorSpace","setClearColor","setSize","setPixelRatio","Math","min","devicePixelRatio","composer","scenePass","bloomPass","ticker","add","addEventListener","resize","aspect","updateProjectionMatrix","group"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/Scene.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { gsap } from \"gsap\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls.js\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\n// import Cube from \"./objects/Cube\";\nimport Line from \"./objects/Line\";\n// import Sphere from \"./objects/Sphere\";\n\nclass SCENE {\n    setup(canvas) {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.canvas = canvas;\n\n        this.setupScene();\n        this.setupCamera();\n        this.setupOrbit();\n        this.setupStats();\n        this.setupRenderer();\n        this.setupPostprecessing();\n\n        this.addObjects();\n        this.addEvents();\n    }\n\n    setupScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    setupStats() {\n        this.stats = new Stats();\n        document.body.appendChild(this.stats.dom);\n    }\n\n    setupCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n            28,\n            this.width / this.height,\n            0.1,\n            10000\n        );\n        this.camera.position.z = 600;\n    }\n    setupOrbit() {\n        this.control = new OrbitControls(this.camera, this.canvas)\n    }\n    setupRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: false,\n            powerPreference: \"high-performance\",\n            stencil: false,\n            depth: false,\n            alpha: true\n        });\n\n        this.renderer.toneMapping = THREE.NoToneMapping;\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        this.renderer.setClearColor(0x000000);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    }\n    setupPostprecessing(){\n        this.composer = new EffectComposer()\n        this.scenePass =  new RenderPass()\n        this.bloomPass =  new UnrealBloomPass()\n    }\n    addEvents() {\n        gsap.ticker.add(this.tick);\n        window.addEventListener('resize', () => this.resize());\n    }\n    resize() {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.renderer.setSize(this.width, this.height);\n\n        this.camera.aspect = this.width / this.height;\n        this.camera.updateProjectionMatrix();\n    }\n    addObjects() {\n        // this.cube = new Cube();\n\n        // this.scene.add(this.cube.mesh);\n        // this.sphere = new Sphere();\n\n        // this.scene.add(this.sphere);\n        this.line = new Line();\n\n        this.scene.add(this.line.group);\n\n    }\n\n    tick = () => {\n        this.stats.begin();\n\n        // this.cube.tick();\n        // this.sphere.tick();\n        this.line.tick();\n\n        this.renderer.render(this.scene, this.camera);\n\n        this.stats.end();\n    }\n}\n\nconst Scene = new SCENE();\nexport default Scene;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}