{"ast":null,"code":"import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\nexport default class Sphere {\n  constructor() {\n    this.geometry = new THREE.SphereGeometry(15, 32, 16);\n    this.material = new THREE.MeshNormalMaterial({\n      color: 0xffff00\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n  }\n  tick() {\n    this.mesh.rotation.x += 0.01;\n    const frequency = AudioController.fdata[0] / 255;\n    const remapped = map(frequency, frequenceMin, frequenceMax, 0, extrusionAmount);\n    const vertices = this.mesh.geometry.vertices;\n    for (let i = 0; i < vertices.length; i++) {\n      const vertex = vertices[i];\n      const direction = vertex.clone().normalize().multiplyScalar(remapped);\n      vertex.add(direction);\n    }\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n}","map":{"version":3,"names":["THREE","AudioController","Sphere","constructor","geometry","SphereGeometry","material","MeshNormalMaterial","color","mesh","Mesh","tick","rotation","x","frequency","fdata","remapped","map","frequenceMin","frequenceMax","extrusionAmount","vertices","i","length","vertex","direction","clone","normalize","multiplyScalar","add","verticesNeedUpdate"],"sources":["/Users/noamsebahoun/Documents/MMI/MMI_3/karl/three-reader-live/src/webgl/objects/Sphere.js"],"sourcesContent":["import * as THREE from 'three';\nimport AudioController from '../../components/utils/AudioController';\n\nexport default class Sphere {\n    constructor() {\n        this.geometry = new THREE.SphereGeometry(15, 32, 16);\n        this.material = new THREE.MeshNormalMaterial({ color: 0xffff00 });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n    }\n    \n    tick() {\n        this.mesh.rotation.x += 0.01;\n\n        const frequency = AudioController.fdata[0] / 255;\n        const remapped = map(frequency, frequenceMin, frequenceMax, 0, extrusionAmount);\n\n        const vertices = this.mesh.geometry.vertices;\n\n        for (let i = 0; i < vertices.length; i++) {\n            const vertex = vertices[i];\n            const direction = vertex.clone().normalize().multiplyScalar(remapped);\n            vertex.add(direction);\n        }\n\n        this.mesh.geometry.verticesNeedUpdate = true;\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,wCAAwC;AAEpE,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpD,IAAI,CAACC,QAAQ,GAAG,IAAIN,KAAK,CAACO,kBAAkB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,IAAI,CAACC,IAAI,GAAG,IAAIT,KAAK,CAACU,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACE,QAAQ,CAAC;EAC5D;EAEAK,IAAIA,CAAA,EAAG;IACH,IAAI,CAACF,IAAI,CAACG,QAAQ,CAACC,CAAC,IAAI,IAAI;IAE5B,MAAMC,SAAS,GAAGb,eAAe,CAACc,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;IAChD,MAAMC,QAAQ,GAAGC,GAAG,CAACH,SAAS,EAAEI,YAAY,EAAEC,YAAY,EAAE,CAAC,EAAEC,eAAe,CAAC;IAE/E,MAAMC,QAAQ,GAAG,IAAI,CAACZ,IAAI,CAACL,QAAQ,CAACiB,QAAQ;IAE5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,MAAM,GAAGH,QAAQ,CAACC,CAAC,CAAC;MAC1B,MAAMG,SAAS,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,cAAc,CAACZ,QAAQ,CAAC;MACrEQ,MAAM,CAACK,GAAG,CAACJ,SAAS,CAAC;IACzB;IAEA,IAAI,CAAChB,IAAI,CAACL,QAAQ,CAAC0B,kBAAkB,GAAG,IAAI;EAChD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}